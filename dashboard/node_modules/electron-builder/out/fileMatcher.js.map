{
  "version": 3,
  "file": "fileMatcher.js",
  "sourceRoot": "",
  "sources": [
    "../src/fileMatcher.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAO,AAAE,AAAM,AAAuB;;;;;;AAC/C,AAAO,AAAE,AAAO,AAAE,AAAQ,AAAU,AAAU,AAAE,AAAM,AAA8B;;;;;;AACpF,AAAO,AAAE,AAAI,AAAE,AAAM,AAA+B;;;;;;AACpD,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;;;AACnC,AAAO,AAAE,AAAS,AAAE,AAAM,AAAW;;;;AACrC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAY,AAAE,AAAQ,AAAE,AAAM,AAAe,AAEtD,AAAM;;;;;;;;;AAMJ,gBAAY,AAAY,MAAE,AAAU,IAAmB,AAA0C,eAAE,AAAqC;AAAjF,aAAa,gBAAb,AAAa,AAA6B;AAC/F,AAAI,aAAC,AAAI,OAAG,AAAa,cAAC,AAAI,AAAC;AAC/B,AAAI,aAAC,AAAE,KAAG,AAAa,cAAC,AAAE,AAAC;AAC3B,AAAI,aAAC,AAAQ,WAAG,AAAO,mEAAC,AAAQ,AAAC,UAAC,AAAG,IAAC,AAAE,MAAI,AAAI,MAAC,AAAK,MAAC,AAAS,UAAC,AAAa,cAAC,AAAE,AAAC,AAAC,AAAC,AACtF;AAAC;AAED,AAAU,eAAC,AAAe;AACxB,AAAI,aAAC,AAAQ,SAAC,AAAI,KAAC,AAAI,MAAC,AAAK,MAAC,AAAS,UAAC,AAAI,KAAC,AAAa,cAAC,AAAO,AAAC,AAAC,AAAC,AACvE;AAAC;AAED,AAAa;AACX,AAAiD;AACjD,AAAI,aAAC,AAAQ,SAAC,AAAO,QAAC,AAAM,AAAC,AAC/B;AAAC;AAED,AAAO;AACL,AAAM,eAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,WAAK,AAAC,AACnC;AAAC;AAED,AAAkB;AAChB,AAAM,eAAC,CAAC,AAAI,KAAC,AAAO,AAAE,aAAI,AAAI,KAAC,AAAQ,SAAC,AAAI,KAAC,AAAE,MAAI,CAAC,AAAE,GAAC,AAAU,WAAC,AAAG,AAAC,AAAC,SAAI,AAAI,AACjF;AAAC;AAED,AAAqB,0BAAC,AAAwB,QAAE,AAAgB;AAC9D,AAAmE;AACnE,cAAM,AAAgB,mBAAG,EAAC,AAAG,KAAE,AAAI,AAAC;AAEpC,cAAM,AAAY,eAAG,AAAO,WAAI,AAAI,OAAG,AAAI,OAAG,AAAI,MAAC,AAAQ,SAAC,AAAO,SAAE,AAAI,KAAC,AAAI,AAAC;AAE/E,AAAE,AAAC,YAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,WAAK,AAAC,KAAI,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACvD,AAAqC;AACrC,AAAM,mBAAC,AAAI,KAAC,AAAI,AAAS,gDAAC,AAAY,cAAE,AAAgB,AAAC,AAAC;AAC1D,AAAM,AACR;AAAC;AAED,AAAG,AAAC,aAAC,IAAI,AAAO,WAAI,AAAI,KAAC,AAAQ,AAAC,UAAC,AAAC;AAClC,AAAE,AAAC,gBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzB,AAAO,0BAAG,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAO,AAAC,AAC5C;AAAC;AAED,kBAAM,AAAa,gBAAG,AAAI,AAAS,gDAAC,AAAO,SAAE,AAAgB,AAAC;AAC9D,AAAM,mBAAC,AAAI,KAAC,AAAa,AAAC;AAE1B,AAAE,AAAC,gBAAC,CAAC,AAAQ,0CAAC,AAAa,AAAC,AAAC,gBAAC,AAAC;AAC7B,AAAmE;AACnE,AAAW;AACX,AAAM,uBAAC,AAAI,KAAC,AAAI,AAAS,AAAC,mDAAG,AAAO,OAAO,SAAE,AAAgB,AAAC,AAAC,AACjE;AAAC,AACH;AAAC,AACH;AAAC;AAED,AAAY,iBAAC,AAAyB,aAAE,AAAqC,WAAE,AAAsC;AACnH,cAAM,AAAc,iBAAqB,AAAE;AAC3C,AAAI,aAAC,AAAqB,sBAAC,AAAc,AAAC;AAC1C,AAAM,eAAC,AAAY,8CAAC,AAAI,KAAC,AAAI,MAAE,AAAc,gBAAE,AAAW,aAAE,AAAS,WAAE,AAAe,AAAC,AACzF;AAAC,AACF,AAED,AAAM;;;mBAAoB,AAAmC;AAC3D,AAAE,AAAC,QAAC,AAAQ,YAAI,AAAI,QAAI,AAAQ,SAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAC9C,AAAM,eAAC,AAAe,gDAAC,AAAO,AAAE,AAClC;AAAC;AAED,AAAM,2DAAiB,AAAG,IAAC,AAAQ;AAA5B,AAAe,wEAAe,AAAK,WAAC,AAAO;AAChD,kBAAM,AAAQ,WAAG,MAAM,AAAU,oCAAC,AAAO,QAAC,AAAI,AAAC;AAC/C,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAI,AAAC,+DAAe,AAAO,QAAC,AAAI,IAAgB,AAAC;AACjD,AAAM,AACR;AAAC;AAED,AAAE,AAAC,gBAAC,AAAQ,SAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AACtB,sBAAM,AAAM,SAAG,MAAM,AAAU,oCAAC,AAAO,QAAC,AAAE,AAAC;AAC3C,AAAoE;AACpE,AAAE,AAAC,oBAAC,AAAM,UAAI,AAAI,QAAI,AAAM,OAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC3C,AAAM,2BAAC,MAAM,AAAQ,kCAAC,AAAO,QAAC,AAAI,MAAE,AAAI,MAAC,AAAI,KAAC,AAAO,QAAC,AAAE,IAAE,AAAI,MAAC,AAAQ,SAAC,AAAO,QAAC,AAAI,AAAC,AAAC,QAAE,AAAQ,AAAC,AACnG;AAAC;AAED,sBAAM,AAAM,4CAAC,AAAI,MAAC,AAAO,QAAC,AAAO,QAAC,AAAE,AAAC,AAAC;AACtC,AAAM,uBAAC,MAAM,AAAQ,kCAAC,AAAO,QAAC,AAAI,MAAE,AAAO,QAAC,AAAE,IAAE,AAAQ,AAAC,AAC3D;AAAC;AAED,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAO,AAAE,aAAI,AAAO,QAAC,AAAkB,AAAE,AAAC,sBAAC,AAAC;AACtD,AAAO,wBAAC,AAAa,AAAE,AACzB;AAAC;AACD,AAAM,mBAAC,MAAM,AAAO,iCAAC,AAAO,QAAC,AAAI,MAAE,AAAO,QAAC,AAAE,IAAE,AAAO,QAAC,AAAY,AAAE,AAAC,AACxE;AAAC,AAAC,AACJ;;;;;;AAAC",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst\"\nimport { asArray } from \"electron-builder-util\"\nimport { copyDir, copyFile, Filter, statOrNull } from \"electron-builder-util/out/fs\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { mkdirs } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { createFilter, hasMagic } from \"./util/filter\"\n\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  constructor(from: string, to: string, private readonly macroExpander: (pattern: string) => string, patterns?: Array<string> | string | n) {\n    this.from = macroExpander(from)\n    this.to = macroExpander(to)\n    this.patterns = asArray(patterns).map(it => path.posix.normalize(macroExpander(it)))\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(path.posix.normalize(this.macroExpander(pattern)))\n  }\n\n  addAllPattern() {\n    // must be first, see minimatchAll implementation\n    this.patterns.unshift(\"**/*\")\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  containsOnlyIgnore(): boolean {\n    return !this.isEmpty() && this.patterns.find(it => !it.startsWith(\"!\")) == null\n  }\n\n  computeParsedPatterns(result: Array<Minimatch>, fromDir?: string): void {\n    // https://github.com/electron-userland/electron-builder/issues/733\n    const minimatchOptions = {dot: true}\n\n    const relativeFrom = fromDir == null ? null : path.relative(fromDir, this.from)\n\n    if (this.patterns.length === 0 && relativeFrom != null) {\n      // file mappings, from here is a file\n      result.push(new Minimatch(relativeFrom, minimatchOptions))\n      return\n    }\n\n    for (let pattern of this.patterns) {\n      if (relativeFrom != null) {\n        pattern = path.join(relativeFrom, pattern)\n      }\n\n      const parsedPattern = new Minimatch(pattern, minimatchOptions)\n      result.push(parsedPattern)\n\n      if (!hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        result.push(new Minimatch(`${pattern}/**/*`, minimatchOptions))\n      }\n    }\n  }\n\n  createFilter(ignoreFiles?: Set<string>, rawFilter?: (file: string) => boolean, excludePatterns?: Array<Minimatch> | n): Filter {\n    const parsedPatterns: Array<Minimatch> = []\n    this.computeParsedPatterns(parsedPatterns)\n    return createFilter(this.from, parsedPatterns, ignoreFiles, rawFilter, excludePatterns)\n  }\n}\n\nexport function copyFiles(patterns: Array<FileMatcher> | null): Promise<any> {\n  if (patterns == null || patterns.length === 0) {\n    return BluebirdPromise.resolve()\n  }\n\n  return BluebirdPromise.map(patterns, async pattern => {\n    const fromStat = await statOrNull(pattern.from)\n    if (fromStat == null) {\n      warn(`File source ${pattern.from} doesn't exist`)\n      return\n    }\n\n    if (fromStat.isFile()) {\n      const toStat = await statOrNull(pattern.to)\n      // https://github.com/electron-userland/electron-builder/issues/1245\n      if (toStat != null && toStat.isDirectory()) {\n        return await copyFile(pattern.from, path.join(pattern.to, path.basename(pattern.from)), fromStat)\n      }\n\n      await mkdirs(path.dirname(pattern.to))\n      return await copyFile(pattern.from, pattern.to, fromStat)\n    }\n\n    if (pattern.isEmpty() || pattern.containsOnlyIgnore()) {\n      pattern.addAllPattern()\n    }\n    return await copyDir(pattern.from, pattern.to, pattern.createFilter())\n  })\n}"
  ]
}
