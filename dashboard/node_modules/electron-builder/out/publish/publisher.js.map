{
  "version": 3,
  "file": "publisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/publisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { BintrayOptions, GenericServerOptions, GithubOptions, PublishConfiguration, S3Options } from \"electron-builder-http/out/publishOptions\"\nimport { warn } from \"electron-builder-util/out/log\"\nimport { BuildInfo } from \"../packagerApi\"\n\nexport async function getResolvedPublishConfig(packager: BuildInfo, publishConfig: PublishConfiguration, errorIfCannot: boolean = true): Promise<PublishConfiguration | null> {\n  const provider = publishConfig.provider\n  if (provider === \"generic\") {\n    if ((<GenericServerOptions>publishConfig).url == null) {\n      throw new Error(`Please specify \"url\" for \"generic\" update server`)\n    }\n    return publishConfig\n  }\n\n  if (provider === \"s3\") {\n    if ((<S3Options>publishConfig).bucket == null) {\n      throw new Error(`Please specify \"bucket\" for \"s3\" update server`)\n    }\n    return publishConfig\n  }\n\n  async function getInfo() {\n    const info = await packager.repositoryInfo\n    if (info != null) {\n      return info\n    }\n\n    const message = `Cannot detect repository by .git/config. Please specify \"repository\" in the package.json (https://docs.npmjs.com/files/package.json#repository).\\nPlease see https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts`\n    if (errorIfCannot) {\n      throw new Error(message)\n    }\n    else {\n      warn(message)\n      return null\n    }\n  }\n\n  let owner = publishConfig.owner\n  let project = provider === \"github\" ? (<GithubOptions>publishConfig).repo : (<BintrayOptions>publishConfig).package\n\n  if (provider === \"github\" && owner == null && project != null) {\n    const index = project.indexOf(\"/\")\n    if (index > 0) {\n      const repo = project\n      project = repo.substring(0, index)\n      owner = repo.substring(index + 1)\n    }\n  }\n\n  if (!owner || !project) {\n    const info = await getInfo()\n    if (info == null) {\n      return null\n    }\n\n    if (!owner) {\n      owner = info.user\n    }\n    if (!project) {\n      project = info.project\n    }\n  }\n\n  const copy: PublishConfiguration = Object.assign({}, publishConfig)\n  if (copy.owner == null) {\n    copy.owner = owner\n  }\n\n  if (provider === \"github\") {\n    const options = <GithubOptions>copy\n    if (options.repo == null) {\n      options.repo = project\n    }\n    return options\n  }\n  else if (provider === \"bintray\") {\n    const options = <BintrayOptions>copy\n    if (options.package == null) {\n      options.package = project\n    }\n    return options\n  }\n  else {\n    throw new Error(`Unknown publish provider: ${provider}`)\n  }\n}\n\nexport function getCiTag() {\n  const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG || process.env.CI_BUILD_TAG\n  return tag != null && tag.length > 0 ? tag : null\n}"
  ]
}
